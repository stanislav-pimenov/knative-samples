apiVersion: v1
items:
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: knative-eventing-core
      meta.helm.sh/release-namespace: clustername-kn-eventing
    creationTimestamp: "2024-09-16T11:32:38Z"
    generation: 3
    labels:
      app: kafka-broker-dispatcher
      app.kubernetes.io/component: kafka-broker-dispatcher
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: knative-eventing
      app.kubernetes.io/version: d641892814ea8d0d70019201018d90da0a298012
    name: kafka-broker-dispatcher
    namespace: clustername-kn-eventing
    resourceVersion: "172837352"
    uid: fb2b487e-2371-45e4-aa0d-0a0d137b038c
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: Parallel
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kafka-broker-dispatcher
    serviceName: kafka-broker-dispatcher
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kafka-broker-dispatcher
          app.kubernetes.io/component: kafka-broker-dispatcher
          app.kubernetes.io/kind: kafka-dispatcher
          app.kubernetes.io/name: knative-eventing
          app.kubernetes.io/version: d641892814ea8d0d70019201018d90da0a298012
        name: kafka-broker-dispatcher
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: kafka-broker-dispatcher
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - env:
          - name: SERVICE_NAME
            value: kafka-broker-dispatcher
          - name: SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: PRODUCER_CONFIG_FILE_PATH
            value: /etc/config/config-kafka-broker-producer.properties
          - name: CONSUMER_CONFIG_FILE_PATH
            value: /etc/config/config-kafka-broker-consumer.properties
          - name: WEBCLIENT_CONFIG_FILE_PATH
            value: /etc/config/config-kafka-broker-webclient.properties
          - name: DATA_PLANE_CONFIG_FILE_PATH
            value: /etc/contract-resources/data
          - name: EGRESSES_INITIAL_CAPACITY
            value: "20"
          - name: INSTANCE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: METRICS_PATH
            value: /metrics
          - name: METRICS_PORT
            value: "9090"
          - name: METRICS_PUBLISH_QUANTILES
            value: "false"
          - name: METRICS_JVM_ENABLED
            value: "false"
          - name: CONFIG_TRACING_PATH
            value: /etc/tracing
          - name: HTTP2_DISABLE
            value: "true"
          - name: WAIT_STARTUP_SECONDS
            value: "8"
          - name: JAVA_TOOL_OPTIONS
            value: -XX:+CrashOnOutOfMemoryError -XX:InitialRAMPercentage=70.0 -XX:MinRAMPercentage=70.0
              -XX:MaxRAMPercentage=70.0
          image: customregistry/knative.dev/knative-kafka-broker-dispatcher-loom:v1.15
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            tcpSocket:
              port: 9090
            timeoutSeconds: 1
          name: kafka-broker-dispatcher
          ports:
          - containerPort: 9090
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 800Mi
            requests:
              cpu: "1"
              memory: 700Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/temination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/config
            name: config-kafka-broker-data-plane
            readOnly: true
          - mountPath: /etc/contract-resources
            name: contract-resources
            readOnly: true
          - mountPath: /tmp
            name: cache
          - mountPath: /etc/logging
            name: kafka-config-logging
            readOnly: true
          - mountPath: /etc/tracing
            name: config-tracing
            readOnly: true
        dnsConfig:
          options:
          - name: single-request-reopen
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: knative-kafka-broker-data-plane
        serviceAccountName: knative-kafka-broker-data-plane
        terminationGracePeriodSeconds: 30
        topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app: kafka-broker-dispatcher
          maxSkew: 2
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - configMap:
            defaultMode: 420
            name: config-kafka-broker-data-plane
          name: config-kafka-broker-data-plane
        - emptyDir: {}
          name: cache
        - configMap:
            defaultMode: 420
            name: kafka-config-logging
          name: kafka-config-logging
        - configMap:
            defaultMode: 420
            name: config-tracing
          name: config-tracing
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    availableReplicas: 0
    collisionCount: 0
    currentRevision: kafka-broker-dispatcher-5c755dbf5c
    observedGeneration: 3
    replicas: 0
    updateRevision: kafka-broker-dispatcher-5c755dbf5c
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: knative-eventing-core
      meta.helm.sh/release-namespace: clustername-kn-eventing
    creationTimestamp: "2024-09-16T11:32:38Z"
    generation: 3
    labels:
      app: kafka-channel-dispatcher
      app.kubernetes.io/component: kafka-channel-dispatcher
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: knative-eventing
      app.kubernetes.io/version: d641892814ea8d0d70019201018d90da0a298012
    name: kafka-channel-dispatcher
    namespace: clustername-kn-eventing
    resourceVersion: "172836891"
    uid: e2cc62aa-a108-422e-a74c-773dd3627ae2
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: Parallel
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kafka-channel-dispatcher
    serviceName: kafka-channel-dispatcher
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kafka-channel-dispatcher
          app.kubernetes.io/component: kafka-channel-dispatcher
          app.kubernetes.io/kind: kafka-dispatcher
          app.kubernetes.io/name: knative-eventing
          app.kubernetes.io/version: d641892814ea8d0d70019201018d90da0a298012
        name: kafka-channel-dispatcher
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: kafka-channel-dispatcher
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - env:
          - name: SERVICE_NAME
            value: kafka-channel-dispatcher
          - name: SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: PRODUCER_CONFIG_FILE_PATH
            value: /etc/config/config-kafka-channel-producer.properties
          - name: CONSUMER_CONFIG_FILE_PATH
            value: /etc/config/config-kafka-channel-consumer.properties
          - name: WEBCLIENT_CONFIG_FILE_PATH
            value: /etc/config/config-kafka-channel-webclient.properties
          - name: DATA_PLANE_CONFIG_FILE_PATH
            value: /etc/contract-resources/data
          - name: EGRESSES_INITIAL_CAPACITY
            value: "20"
          - name: INSTANCE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: METRICS_PATH
            value: /metrics
          - name: METRICS_PORT
            value: "9090"
          - name: METRICS_PUBLISH_QUANTILES
            value: "false"
          - name: METRICS_JVM_ENABLED
            value: "false"
          - name: CONFIG_TRACING_PATH
            value: /etc/tracing
          - name: HTTP2_DISABLE
            value: "true"
          - name: WAIT_STARTUP_SECONDS
            value: "8"
          - name: JAVA_TOOL_OPTIONS
            value: -XX:+CrashOnOutOfMemoryError -XX:InitialRAMPercentage=70.0 -XX:MinRAMPercentage=70.0
              -XX:MaxRAMPercentage=70.0
          image: customregistry/knative.dev/knative-kafka-broker-dispatcher-loom:v1.15
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            tcpSocket:
              port: 9090
            timeoutSeconds: 1
          name: kafka-channel-dispatcher
          ports:
          - containerPort: 9090
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 800Mi
            requests:
              cpu: "1"
              memory: 700Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/temination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/config
            name: config-kafka-channel-data-plane
            readOnly: true
          - mountPath: /etc/contract-resources
            name: contract-resources
            readOnly: true
          - mountPath: /tmp
            name: cache
          - mountPath: /etc/logging
            name: kafka-config-logging
            readOnly: true
          - mountPath: /etc/tracing
            name: config-tracing
            readOnly: true
        dnsConfig:
          options:
          - name: single-request-reopen
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: knative-kafka-channel-data-plane
        serviceAccountName: knative-kafka-channel-data-plane
        terminationGracePeriodSeconds: 30
        topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app: kafka-channel-dispatcher
          maxSkew: 2
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - configMap:
            defaultMode: 420
            name: config-kafka-channel-data-plane
          name: config-kafka-channel-data-plane
        - emptyDir: {}
          name: cache
        - configMap:
            defaultMode: 420
            name: kafka-config-logging
          name: kafka-config-logging
        - configMap:
            defaultMode: 420
            name: config-tracing
          name: config-tracing
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    availableReplicas: 0
    collisionCount: 0
    currentRevision: kafka-channel-dispatcher-6779b66657
    observedGeneration: 3
    replicas: 0
    updateRevision: kafka-channel-dispatcher-6779b66657
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: knative-eventing-core
      meta.helm.sh/release-namespace: clustername-kn-eventing
    creationTimestamp: "2024-09-16T11:32:38Z"
    generation: 18
    labels:
      app: kafka-source-dispatcher
      app.kubernetes.io/component: kafka-source-dispatcher
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: knative-eventing
      app.kubernetes.io/version: d641892814ea8d0d70019201018d90da0a298012
    name: kafka-source-dispatcher
    namespace: clustername-kn-eventing
    resourceVersion: "188690176"
    uid: 2d85a2a0-7a6b-46e0-8050-272b310c8a95
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kafka-source-dispatcher
    serviceName: kafka-source-dispatcher
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kafka-source-dispatcher
          app.kubernetes.io/component: kafka-channel-dispatcher
          app.kubernetes.io/kind: kafka-dispatcher
          app.kubernetes.io/name: knative-eventing
          app.kubernetes.io/version: d641892814ea8d0d70019201018d90da0a298012
          sidecar.istio.io/inject: "true"
          sidecar.istio.io/proxyCPULimit: 100m
          sidecar.istio.io/proxyMemoryLimit: 150Mi
        name: kafka-source-dispatcher
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: kafka-source-dispatcher
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - env:
          - name: SERVICE_NAME
            value: kafka-source-dispatcher
          - name: SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: PRODUCER_CONFIG_FILE_PATH
            value: /etc/config/config-kafka-source-producer.properties
          - name: CONSUMER_CONFIG_FILE_PATH
            value: /etc/config/config-kafka-source-consumer.properties
          - name: WEBCLIENT_CONFIG_FILE_PATH
            value: /etc/config/config-kafka-source-webclient.properties
          - name: DATA_PLANE_CONFIG_FILE_PATH
            value: /etc/contract-resources/data
          - name: EGRESSES_INITIAL_CAPACITY
            value: "20"
          - name: INSTANCE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: METRICS_PATH
            value: /metrics
          - name: METRICS_PORT
            value: "9090"
          - name: METRICS_PUBLISH_QUANTILES
            value: "false"
          - name: METRICS_JVM_ENABLED
            value: "false"
          - name: CONFIG_TRACING_PATH
            value: /etc/tracing
          - name: HTTP2_DISABLE
            value: "true"
          - name: WAIT_STARTUP_SECONDS
            value: "8"
          - name: JAVA_TOOL_OPTIONS
            value: -XX:+CrashOnOutOfMemoryError -XX:InitialRAMPercentage=70.0 -XX:MinRAMPercentage=70.0
              -XX:MaxRAMPercentage=70.0
          image: customregistry/knative.dev/knative-kafka-broker-dispatcher-loom:v1.15.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            tcpSocket:
              port: 9090
            timeoutSeconds: 1
          name: kafka-source-dispatcher
          ports:
          - containerPort: 9090
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 1000Mi
            requests:
              cpu: "1"
              memory: 700Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/temination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/config
            name: config-kafka-source-data-plane
            readOnly: true
          - mountPath: /etc/contract-resources
            name: contract-resources
            readOnly: true
          - mountPath: /tmp
            name: cache
          - mountPath: /etc/logging
            name: kafka-config-logging
            readOnly: true
          - mountPath: /etc/tracing
            name: config-tracing
            readOnly: true
        dnsConfig:
          options:
          - name: single-request-reopen
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: knative-kafka-source-data-plane
        serviceAccountName: knative-kafka-source-data-plane
        terminationGracePeriodSeconds: 30
        topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app: kafka-source-dispatcher
          maxSkew: 2
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - configMap:
            defaultMode: 420
            name: config-kafka-source-data-plane
          name: config-kafka-source-data-plane
        - emptyDir: {}
          name: cache
        - configMap:
            defaultMode: 420
            name: kafka-config-logging
          name: kafka-config-logging
        - configMap:
            defaultMode: 420
            name: config-tracing
          name: config-tracing
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    availableReplicas: 0
    collisionCount: 0
    currentRevision: kafka-source-dispatcher-7d8bb87f4d
    observedGeneration: 18
    replicas: 0
    updateRevision: kafka-source-dispatcher-75f446b88f
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
